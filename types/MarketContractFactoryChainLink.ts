/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js';
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from './typechain-runtime';

export class MarketContractFactoryChainLink extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'MKT_TOKEN_ADDRESS',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        constant: true,
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        constant: true,
        inputs: [],
        name: 'oracleHubAddress',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        constant: true,
        inputs: [],
        name: 'marketContractRegistry',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        constant: true,
        inputs: [],
        name: 'MKT_TOKEN',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        constant: false,
        inputs: [{ name: 'newOwner', type: 'address' }],
        name: 'transferOwnership',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        inputs: [
          { name: 'registryAddress', type: 'address' },
          { name: 'mktTokenAddress', type: 'address' }
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor'
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'creator', type: 'address' },
          { indexed: true, name: 'contractAddress', type: 'address' }
        ],
        name: 'MarketContractCreated',
        type: 'event'
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'previousOwner', type: 'address' },
          { indexed: true, name: 'newOwner', type: 'address' }
        ],
        name: 'OwnershipTransferred',
        type: 'event'
      },
      {
        constant: false,
        inputs: [
          { name: 'contractName', type: 'string' },
          { name: 'collateralTokenAddress', type: 'address' },
          { name: 'contractSpecs', type: 'uint256[5]' },
          { name: 'oracleQueryURL', type: 'string' },
          { name: 'oracleQueryPath', type: 'string' },
          { name: 'sleepJobId', type: 'bytes32' },
          { name: 'onDemandJobId', type: 'bytes32' }
        ],
        name: 'deployMarketContractChainLink',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [{ name: 'registryAddress', type: 'address' }],
        name: 'setRegistryAddress',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [{ name: 'hubAddress', type: 'address' }],
        name: 'setOracleHubAddress',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<MarketContractFactoryChainLink> {
    const contract = new MarketContractFactoryChainLink(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get MKT_TOKEN_ADDRESS(): Promise<string> {
    return promisify(this.rawWeb3Contract.MKT_TOKEN_ADDRESS, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public get oracleHubAddress(): Promise<string> {
    return promisify(this.rawWeb3Contract.oracleHubAddress, []);
  }
  public get marketContractRegistry(): Promise<string> {
    return promisify(this.rawWeb3Contract.marketContractRegistry, []);
  }
  public get MKT_TOKEN(): Promise<string> {
    return promisify(this.rawWeb3Contract.MKT_TOKEN, []);
  }

  public transferOwnershipTx(newOwner: BigNumber | string): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'transferOwnership', [
      newOwner.toString()
    ]);
  }
  public deployMarketContractChainLinkTx(
    contractName: string,
    collateralTokenAddress: BigNumber | string,
    contractSpecs: BigNumber[],
    oracleQueryURL: string,
    oracleQueryPath: string,
    sleepJobId: string,
    onDemandJobId: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'deployMarketContractChainLink', [
      contractName.toString(),
      collateralTokenAddress.toString(),
      contractSpecs.map(val => val.toString()),
      oracleQueryURL.toString(),
      oracleQueryPath.toString(),
      sleepJobId.toString(),
      onDemandJobId.toString()
    ]);
  }
  public setRegistryAddressTx(
    registryAddress: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'setRegistryAddress', [
      registryAddress.toString()
    ]);
  }
  public setOracleHubAddressTx(
    hubAddress: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'setOracleHubAddress', [
      hubAddress.toString()
    ]);
  }

  public MarketContractCreatedEvent(eventFilter: {
    creator?: BigNumber | string | Array<BigNumber | string>;
    contractAddress?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    { creator: BigNumber | string; contractAddress: BigNumber | string },
    {
      creator?: BigNumber | string | Array<BigNumber | string>;
      contractAddress?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new DeferredEventWrapper<
      { creator: BigNumber | string; contractAddress: BigNumber | string },
      {
        creator?: BigNumber | string | Array<BigNumber | string>;
        contractAddress?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, 'MarketContractCreated', eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, 'OwnershipTransferred', eventFilter);
  }
}
