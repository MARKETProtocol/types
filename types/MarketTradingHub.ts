/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js';
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from './typechain-runtime';

export class MarketTradingHub extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'MKT_TOKEN_ADDRESS',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        constant: true,
        inputs: [],
        name: 'MARKET_COLLATERAL_POOL_ADDRESS',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        inputs: [
          { name: 'mktTokenAddress', type: 'address' },
          { name: 'collateralPoolAddress', type: 'address' }
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor'
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'errorCode', type: 'uint8' },
          { indexed: true, name: 'orderHash', type: 'bytes32' }
        ],
        name: 'Error',
        type: 'event'
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'marketContractAddress', type: 'address' },
          { indexed: true, name: 'maker', type: 'address' },
          { indexed: true, name: 'taker', type: 'address' },
          { indexed: false, name: 'feeRecipient', type: 'address' },
          { indexed: false, name: 'filledQty', type: 'int256' },
          { indexed: false, name: 'paidMakerFee', type: 'uint256' },
          { indexed: false, name: 'paidTakerFee', type: 'uint256' },
          { indexed: false, name: 'price', type: 'uint256' },
          { indexed: false, name: 'orderHash', type: 'bytes32' }
        ],
        name: 'OrderFilled',
        type: 'event'
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'marketContractAddress', type: 'address' },
          { indexed: true, name: 'maker', type: 'address' },
          { indexed: true, name: 'feeRecipient', type: 'address' },
          { indexed: false, name: 'cancelledQty', type: 'int256' },
          { indexed: false, name: 'orderHash', type: 'bytes32' }
        ],
        name: 'OrderCancelled',
        type: 'event'
      },
      {
        constant: false,
        inputs: [
          { name: 'orderAddresses', type: 'address[4]' },
          { name: 'unsignedOrderValues', type: 'uint256[5]' },
          { name: 'orderQty', type: 'int256' },
          { name: 'qtyToFill', type: 'int256' },
          { name: 'v', type: 'uint8' },
          { name: 'r', type: 'bytes32' },
          { name: 's', type: 'bytes32' }
        ],
        name: 'tradeOrder',
        outputs: [{ name: 'filledQty', type: 'int256' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [
          { name: 'orderAddresses', type: 'address[4]' },
          { name: 'unsignedOrderValues', type: 'uint256[5]' },
          { name: 'orderQty', type: 'int256' },
          { name: 'qtyToCancel', type: 'int256' }
        ],
        name: 'cancelOrder',
        outputs: [{ name: 'qtyCancelled', type: 'int256' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        constant: true,
        inputs: [{ name: 'orderHash', type: 'bytes32' }],
        name: 'getQtyFilledOrCancelledFromOrder',
        outputs: [{ name: '', type: 'int256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<MarketTradingHub> {
    const contract = new MarketTradingHub(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get MKT_TOKEN_ADDRESS(): Promise<string> {
    return promisify(this.rawWeb3Contract.MKT_TOKEN_ADDRESS, []);
  }
  public get MARKET_COLLATERAL_POOL_ADDRESS(): Promise<string> {
    return promisify(this.rawWeb3Contract.MARKET_COLLATERAL_POOL_ADDRESS, []);
  }
  public getQtyFilledOrCancelledFromOrder(orderHash: string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getQtyFilledOrCancelledFromOrder, [orderHash.toString()]);
  }

  public tradeOrderTx(
    orderAddresses: string[],
    unsignedOrderValues: BigNumber[],
    orderQty: BigNumber | number,
    qtyToFill: BigNumber | number,
    v: BigNumber | number,
    r: string,
    s: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'tradeOrder', [
      orderAddresses.map(val => val.toString()),
      unsignedOrderValues.map(val => val.toString()),
      orderQty.toString(),
      qtyToFill.toString(),
      v.toString(),
      r.toString(),
      s.toString()
    ]);
  }
  public cancelOrderTx(
    orderAddresses: string[],
    unsignedOrderValues: BigNumber[],
    orderQty: BigNumber | number,
    qtyToCancel: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'cancelOrder', [
      orderAddresses.map(val => val.toString()),
      unsignedOrderValues.map(val => val.toString()),
      orderQty.toString(),
      qtyToCancel.toString()
    ]);
  }

  public ErrorEvent(eventFilter: {
    errorCode?: BigNumber | number | Array<BigNumber | number>;
    orderHash?: string | Array<string>;
  }): DeferredEventWrapper<
    { errorCode: BigNumber | number; orderHash: string },
    {
      errorCode?: BigNumber | number | Array<BigNumber | number>;
      orderHash?: string | Array<string>;
    }
  > {
    return new DeferredEventWrapper<
      { errorCode: BigNumber | number; orderHash: string },
      {
        errorCode?: BigNumber | number | Array<BigNumber | number>;
        orderHash?: string | Array<string>;
      }
    >(this, 'Error', eventFilter);
  }
  public OrderFilledEvent(eventFilter: {
    marketContractAddress?: BigNumber | string | Array<BigNumber | string>;
    maker?: BigNumber | string | Array<BigNumber | string>;
    taker?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    {
      marketContractAddress: BigNumber | string;
      maker: BigNumber | string;
      taker: BigNumber | string;
      feeRecipient: BigNumber | string;
      filledQty: BigNumber | number;
      paidMakerFee: BigNumber | number;
      paidTakerFee: BigNumber | number;
      price: BigNumber | number;
      orderHash: string;
    },
    {
      marketContractAddress?: BigNumber | string | Array<BigNumber | string>;
      maker?: BigNumber | string | Array<BigNumber | string>;
      taker?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new DeferredEventWrapper<
      {
        marketContractAddress: BigNumber | string;
        maker: BigNumber | string;
        taker: BigNumber | string;
        feeRecipient: BigNumber | string;
        filledQty: BigNumber | number;
        paidMakerFee: BigNumber | number;
        paidTakerFee: BigNumber | number;
        price: BigNumber | number;
        orderHash: string;
      },
      {
        marketContractAddress?: BigNumber | string | Array<BigNumber | string>;
        maker?: BigNumber | string | Array<BigNumber | string>;
        taker?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, 'OrderFilled', eventFilter);
  }
  public OrderCancelledEvent(eventFilter: {
    marketContractAddress?: BigNumber | string | Array<BigNumber | string>;
    maker?: BigNumber | string | Array<BigNumber | string>;
    feeRecipient?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    {
      marketContractAddress: BigNumber | string;
      maker: BigNumber | string;
      feeRecipient: BigNumber | string;
      cancelledQty: BigNumber | number;
      orderHash: string;
    },
    {
      marketContractAddress?: BigNumber | string | Array<BigNumber | string>;
      maker?: BigNumber | string | Array<BigNumber | string>;
      feeRecipient?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new DeferredEventWrapper<
      {
        marketContractAddress: BigNumber | string;
        maker: BigNumber | string;
        feeRecipient: BigNumber | string;
        cancelledQty: BigNumber | number;
        orderHash: string;
      },
      {
        marketContractAddress?: BigNumber | string | Array<BigNumber | string>;
        maker?: BigNumber | string | Array<BigNumber | string>;
        feeRecipient?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, 'OrderCancelled', eventFilter);
  }
}
