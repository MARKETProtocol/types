/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js';
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from './typechain-runtime';

export class MathLib extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [
          { name: 'priceFloor', type: 'uint256' },
          { name: 'priceCap', type: 'uint256' },
          { name: 'qtyMultiplier', type: 'uint256' },
          { name: 'qty', type: 'int256' },
          { name: 'price', type: 'uint256' }
        ],
        name: 'calculateNeededCollateral',
        outputs: [{ name: 'neededCollateral', type: 'uint256' }],
        payable: false,
        stateMutability: 'pure',
        type: 'function'
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(web3: any, address: string | BigNumber): Promise<MathLib> {
    const contract = new MathLib(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public calculateNeededCollateral(
    priceFloor: BigNumber | number,
    priceCap: BigNumber | number,
    qtyMultiplier: BigNumber | number,
    qty: BigNumber | number,
    price: BigNumber | number
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.calculateNeededCollateral, [
      priceFloor.toString(),
      priceCap.toString(),
      qtyMultiplier.toString(),
      qty.toString(),
      price.toString()
    ]);
  }
}
