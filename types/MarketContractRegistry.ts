/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class MarketContractRegistry {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    addressWhiteList(arg0: number | string): TransactionObject<string>;

    factoryAddressWhiteList(arg0: string): TransactionObject<boolean>;

    isWhiteListed(arg0: string): TransactionObject<boolean>;

    isAddressWhiteListed(contractAddress: string): TransactionObject<boolean>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    removeContractFromWhiteList(
      contractAddress: string,
      whiteListIndex: number | string
    ): TransactionObject<boolean>;

    addAddressToWhiteList(contractAddress: string): TransactionObject<void>;

    addFactoryAddress(factoryAddress: string): TransactionObject<void>;

    removeFactoryAddress(factoryAddress: string): TransactionObject<void>;

    owner(): TransactionObject<string>;
    getAddressWhiteList(): TransactionObject<(string)[]>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    AddressAddedToWhitelist(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: string[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AddressRemovedFromWhitelist(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: string[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    FactoryAddressAdded(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: string[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    FactoryAddressRemoved(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: string[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: string[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: string[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: string[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
}
