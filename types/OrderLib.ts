/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js';
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from './typechain-runtime';

export class OrderLib extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [
          { name: 'contractAddress', type: 'address' },
          { name: 'orderAddresses', type: 'address[3]' },
          { name: 'unsignedOrderValues', type: 'uint256[5]' },
          { name: 'orderQty', type: 'int256' }
        ],
        name: 'createOrderHash',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'pure',
        type: 'function'
      },
      {
        constant: true,
        inputs: [
          { name: 'signerAddress', type: 'address' },
          { name: 'hash', type: 'bytes32' },
          { name: 'v', type: 'uint8' },
          { name: 'r', type: 'bytes32' },
          { name: 's', type: 'bytes32' }
        ],
        name: 'isValidSignature',
        outputs: [{ name: '', type: 'bool' }],
        payable: false,
        stateMutability: 'pure',
        type: 'function'
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(web3: any, address: string | BigNumber): Promise<OrderLib> {
    const contract = new OrderLib(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === '0x0') {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public createOrderHash(
    contractAddress: BigNumber | string,
    orderAddresses: string[],
    unsignedOrderValues: BigNumber[],
    orderQty: BigNumber | number
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.createOrderHash, [
      contractAddress.toString(),
      orderAddresses.map(val => val.toString()),
      unsignedOrderValues.map(val => val.toString()),
      orderQty.toString()
    ]);
  }
  public isValidSignature(
    signerAddress: BigNumber | string,
    hash: BigNumber,
    v: BigNumber | number,
    r: BigNumber,
    s: BigNumber
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isValidSignature, [
      signerAddress.toString(),
      hash.toString(),
      v.toString(),
      r.toString(),
      s.toString()
    ]);
  }
}
